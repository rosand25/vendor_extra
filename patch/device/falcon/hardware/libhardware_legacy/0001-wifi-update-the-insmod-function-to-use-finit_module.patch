From e795917dc80d108defcf11dd3e3c6dc0e59c0519 Mon Sep 17 00:00:00 2001
From: Ravi Kumar Siddojigari <rsiddoji@codeaurora.org>
Date: Fri, 24 Jun 2016 21:54:26 +0530
Subject: [PATCH 1/3] wifi: update the insmod function to use finit_module

As part of security requirement kernel now checks module requested
is on a trusted location like rootfs/system which are generally
readonly location.

Change-Id: I6ed2ef674041095932e949e507ac344c166c49ad
Signed-off-by: sub77 <darfpunk@gmx.de>

Conflicts:
	wifi/wifi.c

Signed-off-by: sub77 <darfpunk@gmx.de>
---
 wifi/wifi.c | 51 ++++++++++++++++++++++++++-------------------------
 1 file changed, 26 insertions(+), 25 deletions(-)

diff --git a/wifi/wifi.c b/wifi/wifi.c
index 43414bb..e18cca1 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -35,6 +35,7 @@
 #include <nl80211.h>
 #endif
 
+#include <sys/syscall.h>
 #include "hardware_legacy/wifi.h"
 #ifdef LIBWPA_CLIENT_EXISTS
 #include "libwpa_client/wpa_ctrl.h"
@@ -68,12 +69,12 @@ void wpa_ctrl_cleanup(void) {}
 struct wpa_ctrl *wpa_ctrl_open(const char *ctrl_path) { return NULL; }
 void wpa_ctrl_close(struct wpa_ctrl *ctrl) {}
 int wpa_ctrl_request(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,
-	char *reply, size_t *reply_len, void (*msg_cb)(char *msg, size_t len))
-	{ return 0; }
+    char *reply, size_t *reply_len, void (*msg_cb)(char *msg, size_t len))
+    { return 0; }
 int wpa_ctrl_attach(struct wpa_ctrl *ctrl) { return 0; }
 int wpa_ctrl_detach(struct wpa_ctrl *ctrl) { return 0; }
 int wpa_ctrl_recv(struct wpa_ctrl *ctrl, char *reply, size_t *reply_len)
-	{ return 0; }
+    { return 0; }
 int wpa_ctrl_get_fd(struct wpa_ctrl *ctrl) { return 0; }
 #endif
 
@@ -88,7 +89,7 @@ static char primary_iface[PROPERTY_VALUE_MAX];
 // sockets is in
 
 #ifdef USES_TI_MAC80211
-#define P2P_INTERFACE			"p2p0"
+#define P2P_INTERFACE           "p2p0"
 struct nl_sock *nl_soc;
 struct nl_cache *nl_cache;
 struct genl_family *nl80211;
@@ -101,22 +102,22 @@ struct genl_family *nl80211;
 #define WIFI_DRIVER_MODULE_AP_ARG       ""
 #endif
 #ifndef WIFI_FIRMWARE_LOADER
-#define WIFI_FIRMWARE_LOADER		""
+#define WIFI_FIRMWARE_LOADER        ""
 #endif
-#define WIFI_TEST_INTERFACE		"sta"
+#define WIFI_TEST_INTERFACE     "sta"
 
 #ifndef WIFI_DRIVER_FW_PATH_STA
-#define WIFI_DRIVER_FW_PATH_STA		NULL
+#define WIFI_DRIVER_FW_PATH_STA     NULL
 #endif
 #ifndef WIFI_DRIVER_FW_PATH_AP
-#define WIFI_DRIVER_FW_PATH_AP		NULL
+#define WIFI_DRIVER_FW_PATH_AP      NULL
 #endif
 #ifndef WIFI_DRIVER_FW_PATH_P2P
-#define WIFI_DRIVER_FW_PATH_P2P		NULL
+#define WIFI_DRIVER_FW_PATH_P2P     NULL
 #endif
 
 #ifndef WIFI_DRIVER_FW_PATH_PARAM
-#define WIFI_DRIVER_FW_PATH_PARAM	"/sys/module/wlan/parameters/fwpath"
+#define WIFI_DRIVER_FW_PATH_PARAM   "/sys/module/wlan/parameters/fwpath"
 #endif
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
@@ -140,7 +141,7 @@ static const char CONTROL_IFACE_PATH[]  = "/data/misc/wifi/sockets";
 static const char MODULE_FILE[]         = "/proc/modules";
 
 static const char IFNAME[]              = "IFNAME=";
-#define IFNAMELEN			(sizeof(IFNAME) - 1)
+#define IFNAMELEN           (sizeof(IFNAME) - 1)
 static const char WPA_EVENT_IGNORE[]    = "CTRL-EVENT-IGNORE ";
 
 static const char SUPP_ENTROPY_FILE[]   = WIFI_ENTROPY_FILE;
@@ -191,19 +192,19 @@ char* get_samsung_wifi_type()
 
 static int insmod(const char *filename, const char *args)
 {
-    void *module;
-    unsigned int size;
-    int ret;
-
-    module = load_file(filename, &size);
-    if (!module)
+     /* O_NOFOLLOW is removed as wlan.ko is symlink pointing to
+        the vendor specfic file which is in readonly location */
+     int fd = open(filename, O_RDONLY | O_CLOEXEC);
+     if (fd == -1) {
+        ALOGD("insmod: open(\"%s\") failed: %s", filename, strerror(errno));
         return -1;
-
-    ret = init_module(module, size, args);
-
-    free(module);
-
-    return ret;
+     }
+     int rc = syscall(__NR_finit_module, fd, args, 0);
+     if (rc == -1) {
+       ALOGD("finit_module for \"%s\" failed: %s", filename, strerror(errno));
+     }
+     close(fd);
+     return rc;
 }
 
 static int rmmod(const char *modname)
@@ -1014,9 +1015,9 @@ int wifi_wait_on_socket(char *buf, size_t buflen)
     /*
      * Events strings are in the format
      *
-     *     IFNAME=iface <N>CTRL-EVENT-XXX 
+     *     IFNAME=iface <N>CTRL-EVENT-XXX
      *        or
-     *     <N>CTRL-EVENT-XXX 
+     *     <N>CTRL-EVENT-XXX
      *
      * where N is the message level in numerical form (0=VERBOSE, 1=DEBUG,
      * etc.) and XXX is the event name. The level information is not useful
-- 
2.1.4

