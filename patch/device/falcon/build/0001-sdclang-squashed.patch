From e89909310295096495406e0bef2acc2c82fb6d84 Mon Sep 17 00:00:00 2001
From: sub77 <darfpunk@gmx.de>
Date: Mon, 19 Dec 2016 22:46:26 +0000
Subject: [PATCH] sdclang: squashed

* [PATCH 1/3] Control building shared libs, static libs and executables
* [PATCH 2/3] build: Require devices to opt-in for SDCLANG
* [PATCH 3/3] binary: Append cc/cxx wrapper to sdclang

Change-Id: Ibf44483d017553179f6301c9262dbe8105200583
Signed-off-by: sub77 <darfpunk@gmx.de>
---
 core/binary.mk         | 17 +++++++++++++++++
 core/clear_vars.mk     |  3 +++
 core/executable.mk     | 10 ++++++++++
 core/shared_library.mk | 10 ++++++++++
 core/static_library.mk | 10 ++++++++++
 5 files changed, 50 insertions(+)

diff --git a/core/binary.mk b/core/binary.mk
index 1857d76..7cef129 100644
--- a/core/binary.mk
+++ b/core/binary.mk
@@ -218,6 +218,8 @@ ifdef LOCAL_CLANG_$($(my_prefix)$(LOCAL_2ND_ARCH_VAR_PREFIX)ARCH)
 my_clang := $(strip $(LOCAL_CLANG_$($(my_prefix)$(LOCAL_2ND_ARCH_VAR_PREFIX)ARCH)))
 endif
 
+my_sdclang := $(strip $(LOCAL_SDCLANG))
+
 # clang is enabled by default for host builds
 # enable it unless we've specifically disabled clang above
 ifdef LOCAL_IS_HOST_MODULE
@@ -259,6 +261,13 @@ endif
 
 my_cppflags := $(my_cpp_std_version) $(my_cppflags)
 
+ifeq ($(SDCLANG),true)
+    ifeq ($(my_sdclang),)
+        ifeq ($(TARGET_USE_SDCLANG),true)
+            my_sdclang := true
+        endif
+    endif
+endif
 
 # arch-specific static libraries go first so that generic ones can depend on them
 my_static_libraries := $(LOCAL_STATIC_LIBRARIES_$($(my_prefix)$(LOCAL_2ND_ARCH_VAR_PREFIX)ARCH)) $(LOCAL_STATIC_LIBRARIES_$(my_32_64_bit_suffix)) $(my_static_libraries)
@@ -314,6 +323,14 @@ my_target_global_cflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_TARGET_GLOBAL_CFL
 my_target_global_conlyflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_TARGET_GLOBAL_CONLYFLAGS)
 my_target_global_cppflags += $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_TARGET_GLOBAL_CPPFLAGS)
 my_target_global_ldflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)CLANG_TARGET_GLOBAL_LDFLAGS)
+    ifeq ($(my_sdclang),true)
+        ifeq ($(strip $(my_cc)),)
+            my_cc := $(my_cc_wrapper) $(SDCLANG_PATH)/clang $(SDLLVM_AE_FLAG) -Wno-vectorizer-no-neon
+        endif
+        ifeq ($(strip $(my_cxx)),)
+            my_cxx := $(my_cxx_wrapper) $(SDCLANG_PATH)/clang++ $(SDLLVM_AE_FLAG) -Wno-vectorizer-no-neon
+        endif
+    endif
 else
 my_target_global_cflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_GLOBAL_CFLAGS)
 my_target_global_conlyflags := $($(LOCAL_2ND_ARCH_VAR_PREFIX)TARGET_GLOBAL_CONLYFLAGS)
diff --git a/core/clear_vars.mk b/core/clear_vars.mk
index 14bc77d..7d4b37a 100644
--- a/core/clear_vars.mk
+++ b/core/clear_vars.mk
@@ -156,6 +156,9 @@ LOCAL_COMPATIBILITY_SUPPORT_FILES:=
 LOCAL_CTS_TEST_PACKAGE:=
 LOCAL_CTS_TEST_RUNNER:=
 LOCAL_CLANG:=
+LOCAL_SDCLANG:=
+LOCAL_SDCLANG_LTO:=
+LOCAL_SDCLANG_EXTRA_FLAGS_32:=
 LOCAL_JAR_EXCLUDE_FILES:=
 LOCAL_JAR_PACKAGES:=
 LOCAL_JAR_EXCLUDE_PACKAGES:=
diff --git a/core/executable.mk b/core/executable.mk
index e22ea0e..5a33db7 100644
--- a/core/executable.mk
+++ b/core/executable.mk
@@ -42,6 +42,10 @@ endif
 
 my_skip_non_preferred_arch :=
 
+ifeq ($(LOCAL_SDCLANG), true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 # check if preferred arch is supported
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 ifeq ($(my_module_arch_supported),true)
@@ -80,4 +84,10 @@ LOCAL_NO_2ND_ARCH_MODULE_SUFFIX :=
 
 my_module_arch_supported :=
 
+ifeq ($(LOCAL_SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 endif
diff --git a/core/shared_library.mk b/core/shared_library.mk
index 2f48341..26c455d 100644
--- a/core/shared_library.mk
+++ b/core/shared_library.mk
@@ -21,6 +21,10 @@ endif
 endif # my_module_multilib == both
 
 
+ifeq ($(LOCAL_SDCLANG), true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 LOCAL_2ND_ARCH_VAR_PREFIX :=
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 
@@ -48,6 +52,12 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
+ifeq ($(LOCAL_SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 my_module_arch_supported :=
 
 ###########################################################
diff --git a/core/static_library.mk b/core/static_library.mk
index a8ae399..61a63d0 100644
--- a/core/static_library.mk
+++ b/core/static_library.mk
@@ -6,6 +6,10 @@ ifndef my_module_multilib
 my_module_multilib := both
 endif
 
+ifeq ($(LOCAL_SDCLANG), true)
+include $(SDCLANG_FLAG_DEFS)
+endif
+
 LOCAL_2ND_ARCH_VAR_PREFIX :=
 include $(BUILD_SYSTEM)/module_arch_supported.mk
 
@@ -33,6 +37,12 @@ LOCAL_2ND_ARCH_VAR_PREFIX :=
 
 endif # TARGET_2ND_ARCH
 
+ifeq ($(LOCAL_SDCLANG), true)
+ifeq ($(LOCAL_SDCLANG_LTO), true)
+include $(SDCLANG_LTO_DEFS)
+endif
+endif
+
 my_module_arch_supported :=
 
 ###########################################################
-- 
2.1.4

